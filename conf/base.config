/*
 * -------------------------------------------------
 *  nf-core/popbom Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // TODO nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements

  withName:get_software_versions {
    cache = false
  }
  withName: remove_phix {
    cpus = { check_max (4 * task.attempt, 'cpus' ) }
    memory = { check_max (8.GB * task.attempt, 'memory' ) }
    time = { check_max (6.h * task.attempt, 'time' ) }
  }
  withName: fastp {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName: centrifuge {
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }
  withName: kraken2 {
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }
  withName: metaphlan {
    container = 'mpa2:1.0'
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }
  withName: metaphlan_db_preparation {
    container = 'mpa:1.0'
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }

}
