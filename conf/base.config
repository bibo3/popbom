/*
 * -------------------------------------------------
 *  nf-core/popbom Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

process {

  // TODO nf-core: Check the defaults for all processes
  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements

  withName:GET_SOFTWARE_VERSIONS {
    cache = false
  }
  withName: REMOVE_PHIX {
    cpus = { check_max (4 * task.attempt, 'cpus' ) }
    memory = { check_max (8.GB * task.attempt, 'memory' ) }
    time = { check_max (6.h * task.attempt, 'time' ) }
  }
  withName: FASTP {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 12.GB * task.attempt, 'memory' ) }
    time = { check_max( 4.h * task.attempt, 'time' ) }
  }
  withName: CENTRIFUGE {
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }
  withName: KRAKEN2 {
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (80.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
  }
  withName: METAPHLAN {
    container = 'mpa:1.0'
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
    profiles {
      conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }
  withName: METAPHLAN_DB_PREPARATION {
    container = 'mpa:1.0'
    cpus = { check_max (16 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
    profiles {
      conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }
  withName: STRAIN {
    container = 'mpa:1.0'
    cpus = { check_max (4 * task.attempt, 'cpus' ) }
    memory = { check_max (40.GB * task.attempt, 'memory' ) }
    time = { check_max (12.h * task.attempt, 'time' ) }
    profiles {
      conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }
  withName: GET_METAPHLAN_VERSION {
    container = 'mpa:1.0'
    profiles {
      conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }

  withName: TAXO_REPORT_SUMMARY {
  container = 'ml:1.1'
  profiles {
    conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }

  withName: MODEL_TRAINING {
  container = 'ml:1.1'
  cpus = { check_max (36 * task.attempt, 'cpus' ) }
  memory = { check_max (40.GB * task.attempt, 'memory' ) }
  time = { check_max (48.h * task.attempt, 'time' ) }
  profiles {
    conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }

  withName: HEATMAP_PLOTTING {
  container = 'ml:1.1'
  profiles {
    conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }

  withName: PREDICTION {
  container = 'ml:1.1'
  cpus = { check_max (36 * task.attempt, 'cpus' ) }
  memory = { check_max (40.GB * task.attempt, 'memory' ) }
  time = { check_max (48.h * task.attempt, 'time' ) }
  profiles {
    conda {
        conda = "$baseDir/containers/metaphlan/environment.yml"
      }
    }
  }


}